/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.rcorrent.view;

import br.com.rcorrent.dao.MarcaDao;
import br.com.rcorrent.dao.ModeloDao;
import br.com.rcorrent.enuns.Estados;
import br.com.rcorrent.model.Marca;
import br.com.rcorrent.model.Modelo;
import br.com.rcorrent.tools.ComboBoxUtils;
import br.com.rcorrent.tools.JTableUtils;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author rcorrent
 */
public class ModeloView extends javax.swing.JFrame {
    
    private Integer estado;
    
    private final MarcaDao marcaDao = new MarcaDao();
    private final ModeloDao modeloDao = new ModeloDao();
    
    private Marca marca;
    private Modelo modelo;
    
    
    /**
     * Creates new form ModeloView
     */
    public ModeloView() {
        initComponents();
        
        //deixar o campo valor inicial desabilitado
        jtfValor.setEnabled(false);
        
        this.estado = Estados.getPadrao().getEstado();
        
        //desabilitar botões
        estadoInicialDosBotoes();
        
        //desabilitar os campos
        habilitarCampos(false);
        jtfValor.setEnabled(false);
        //preencher e formatar os campo da tabela de consulta
        preencherTabelaModelos();
        JTableUtils.formatarJtable(jtListaModelo,new int[]{60,370,150});
        
        //preencher JComboBox de MARCA
        ComboBoxUtils.preencherCombo(jcbMarca, marcaDao.getAllMarca());
        limparCampo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jpCadastrar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtfNome = new javax.swing.JTextField();
        jpBotoes = new javax.swing.JPanel();
        jbNovo = new javax.swing.JButton();
        jbAlterar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbGravar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jcbMarca = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtfCodigoMarca = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtfNomeMarca = new javax.swing.JTextField();
        jpConsultar = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jcbFiltrar = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jtfValor = new javax.swing.JTextField();
        jbPesquisar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtListaModelo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Código");

        jtfCodigo.setEnabled(false);

        jLabel2.setText("Nome Modelo");

        jpBotoes.setBackground(new java.awt.Color(222, 222, 222));

        jbNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/rcorrent/icons/1491671388_new10.png"))); // NOI18N
        jbNovo.setMnemonic('N');
        jbNovo.setText("Novo");
        jbNovo.setIconTextGap(10);
        jbNovo.setPreferredSize(new java.awt.Dimension(110, 27));
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });
        jpBotoes.add(jbNovo);

        jbAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/rcorrent/icons/1491671388_new10.png"))); // NOI18N
        jbAlterar.setMnemonic('A');
        jbAlterar.setText("Alterar");
        jbAlterar.setIconTextGap(10);
        jbAlterar.setPreferredSize(new java.awt.Dimension(110, 27));
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarActionPerformed(evt);
            }
        });
        jpBotoes.add(jbAlterar);

        jbExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/rcorrent/icons/1491672387_garbage.png"))); // NOI18N
        jbExcluir.setMnemonic('E');
        jbExcluir.setText("Excluir");
        jbExcluir.setIconTextGap(10);
        jbExcluir.setPreferredSize(new java.awt.Dimension(110, 27));
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });
        jpBotoes.add(jbExcluir);

        jbGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/rcorrent/icons/1491672401_vintage11.png"))); // NOI18N
        jbGravar.setMnemonic('G');
        jbGravar.setText("Gravar");
        jbGravar.setIconTextGap(10);
        jbGravar.setPreferredSize(new java.awt.Dimension(110, 27));
        jbGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGravarActionPerformed(evt);
            }
        });
        jpBotoes.add(jbGravar);

        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/rcorrent/icons/1491672468_cancel-2.png"))); // NOI18N
        jbCancelar.setMnemonic('C');
        jbCancelar.setText("Cancelar");
        jbCancelar.setIconTextGap(10);
        jbCancelar.setPreferredSize(new java.awt.Dimension(110, 27));
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });
        jpBotoes.add(jbCancelar);

        jcbMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMarcaActionPerformed(evt);
            }
        });

        jLabel3.setText("Marca");

        jLabel4.setText("Código");

        jtfCodigoMarca.setEnabled(false);

        jLabel5.setText("Marca");

        jtfNomeMarca.setEnabled(false);

        javax.swing.GroupLayout jpCadastrarLayout = new javax.swing.GroupLayout(jpCadastrar);
        jpCadastrar.setLayout(jpCadastrarLayout);
        jpCadastrarLayout.setHorizontalGroup(
            jpCadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCadastrarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfNome)
                    .addGroup(jpCadastrarLayout.createSequentialGroup()
                        .addGroup(jpCadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtfCodigoMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jpCadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpCadastrarLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jtfNomeMarca)))
                    .addGroup(jpCadastrarLayout.createSequentialGroup()
                        .addGroup(jpCadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpCadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jtfCodigo))
                            .addComponent(jLabel2)
                            .addComponent(jcbMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jpBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
        );
        jpCadastrarLayout.setVerticalGroup(
            jpCadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCadastrarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpCadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpCadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfCodigoMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfNomeMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jpBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        jTabbedPane1.addTab("Cadastrar", jpCadastrar);

        jLabel6.setText("Filtro");

        jcbFiltrar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Geral", "Código", "Modelo", "Marca" }));
        jcbFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbFiltrarActionPerformed(evt);
            }
        });

        jLabel7.setText("Valor");

        jbPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/rcorrent/icons/1491673267_search.png"))); // NOI18N
        jbPesquisar.setMnemonic('P');
        jbPesquisar.setText("Pesquisar");
        jbPesquisar.setIconTextGap(10);
        jbPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarActionPerformed(evt);
            }
        });

        jtListaModelo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Modelo", "Marca"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtListaModelo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtListaModeloMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtListaModelo);

        javax.swing.GroupLayout jpConsultarLayout = new javax.swing.GroupLayout(jpConsultar);
        jpConsultar.setLayout(jpConsultarLayout);
        jpConsultarLayout.setHorizontalGroup(
            jpConsultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConsultarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConsultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addGroup(jpConsultarLayout.createSequentialGroup()
                        .addGroup(jpConsultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpConsultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConsultarLayout.createSequentialGroup()
                                .addComponent(jtfValor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbPesquisar))
                            .addGroup(jpConsultarLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jpConsultarLayout.setVerticalGroup(
            jpConsultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConsultarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConsultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConsultarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Consultar", jpConsultar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(615, 396));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoActionPerformed
        estadoDosBotoesAoInserirNovo();
        habilitarCampos(true);
        limparCampo();
        this.estado = Estados.getInsercao().getEstado();
    }//GEN-LAST:event_jbNovoActionPerformed

    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarActionPerformed
        estadoBotoesModoEdicao();
        habilitarCampos(true);
        this.estado = Estados.getAlteracao().getEstado();
        //preencher JComboBox de MARCA
        ComboBoxUtils.preencherCombo(jcbMarca, marcaDao.getAllMarca());
    }//GEN-LAST:event_jbAlterarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        try {
            Modelo modeloDeletar = getModelo();
            //tratar (se a MARCA veio com todos os campos corretos ou se ela veio por completo.
                if (modeloDeletar == null) {
                    JOptionPane.showMessageDialog(null, "Selecione um Modelo para excluir");
                    return;
                }
                //criando uma optionPane para confirmar a exclusão
                if (JOptionPane.showConfirmDialog(null, "Deseja Realment exlcuir o Modelo?", "ATENÇÃO", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    modeloDao.excluirModelo(modeloDeletar);
                    JOptionPane.showMessageDialog(null, "Modelo excluído com sucesso!!!");
                    limparCampo();
                    habilitarCampos(false);
                    //desabilitar botões
                    estadoInicialDosBotoes();
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erro ao excluir Modelo");
            } finally {
                modeloDao.fecharCursores();
                preencherTabelaModelos();
            }
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGravarActionPerformed
        try {
            Modelo modeloGravar = getModelo();
            //testa se a MARCA veio completa, com todos os itens a serem salvos
            if(modeloGravar == null){
                return;
            }
            //testa se está ocorrendo uma gravação
            if(this.estado == Estados.getInsercao().getEstado()){
                modeloDao.inserirModelo(modeloGravar);
                jtfCodigo.setText(modeloGravar.getCodigoModelo().toString());
                JOptionPane.showMessageDialog(null, "Modelo cadastrado com sucesso!");
            }
            //testa se está ocorrendo um update ou uma alteração
            if(this.estado == Estados.getAlteracao().getEstado()){
                modeloDao.alterarModelo(modeloGravar);
                JOptionPane.showMessageDialog(null, "Registro de Modelo alterado com sucesso!");
            }

            //deixar os botões em estado PADRAO
            estadoPadraoDosBotoes();

            //desabilitar os campos
            habilitarCampos(false);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao salvar Modelo..");
        } finally {
            modeloDao.fecharCursores();
            limparCampo();
            preencherTabelaModelos();
        }
    }//GEN-LAST:event_jbGravarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        //definir estado padrão inicial aos botoes
        estadoInicialDosBotoes();

        //PERGUNTAR SOBRE ENUM
        this.estado = Estados.getPadrao().getEstado();

        limparCampo();

        habilitarCampos(false);
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jcbMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMarcaActionPerformed
        try {
            if(jcbMarca.getSelectedIndex() >= 0){
                marca = (Marca) jcbMarca.getSelectedItem();
                setMarca(marca);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jcbMarcaActionPerformed

    private void jcbFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbFiltrarActionPerformed
        if(jcbFiltrar.getSelectedIndex() == 0){
            jtfValor.setEnabled(false);
            jtfValor.setText("");
        }else{
            jtfValor.setEnabled(true);
            jtfValor.setText("");
        }
    }//GEN-LAST:event_jcbFiltrarActionPerformed

    private void jbPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarActionPerformed
        List<String> campos = new ArrayList<>();
        campos.add("CD_MODELO");
        campos.add("NM_MODELO");
        campos.add("NM_MARCA");
        
        switch(jcbFiltrar.getSelectedIndex()){
            case 0:{//caso seja escolhido a opção GERAL
                preencherTabelaModelos();
            } break;
            case 1:{//caso seja escolhido a opção CÓDIGO
                //testar para valores numéricos
                try {
                    JTableUtils.preencherJTable(jtListaModelo, modeloDao.resultSetGetByIdModelo(Long.parseLong(jtfValor.getText())), campos);                    
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Informe um valor numérico");
                }
            }break;
            case 2:{//caso seja escolhido a opção MODELO
                try {
                    JTableUtils.preencherJTable(jtListaModelo, modeloDao.resultSetGetByNomeModelo(jtfValor.getText()), campos);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }break;
            case 3:{//caso seja escolhido a opção MARCA
                try {
                    JTableUtils.preencherJTable(jtListaModelo, modeloDao.resultSetGetByNomeMarca(jtfValor.getText()), campos);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }break;
        }
        marcaDao.fecharCursores();
    }//GEN-LAST:event_jbPesquisarActionPerformed

    private void jtListaModeloMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtListaModeloMouseClicked
        if(evt.getClickCount() > 1){
            Modelo modelo = modeloDao.getByIdModelo(Long.valueOf(jtListaModelo.getValueAt(jtListaModelo.getSelectedRow(), 0).toString()));
            setModelo(modelo);
            jTabbedPane1.setSelectedIndex(0);
            estadoBotoesModoEdicao();
            jbGravar.setEnabled(false);
        }
    }//GEN-LAST:event_jtListaModeloMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModeloView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModeloView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModeloView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModeloView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModeloView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbAlterar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbGravar;
    private javax.swing.JButton jbNovo;
    private javax.swing.JButton jbPesquisar;
    private javax.swing.JComboBox<String> jcbFiltrar;
    private javax.swing.JComboBox<String> jcbMarca;
    private javax.swing.JPanel jpBotoes;
    private javax.swing.JPanel jpCadastrar;
    private javax.swing.JPanel jpConsultar;
    private javax.swing.JTable jtListaModelo;
    private javax.swing.JTextField jtfCodigo;
    private javax.swing.JTextField jtfCodigoMarca;
    private javax.swing.JTextField jtfNome;
    private javax.swing.JTextField jtfNomeMarca;
    private javax.swing.JTextField jtfValor;
    // End of variables declaration//GEN-END:variables
    /**SETAR MARCA.
     *  
     */    
    public void setMarca(Marca marca){
        try {
            jtfCodigoMarca.setText(marca.getCodigoMarca().toString());
            jtfNomeMarca.setText(marca.getNomeMarca());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    /**PREENCHER A TABELA DE MODELOS.
     * 
     */
    public void preencherTabelaModelos(){
        List<String> campos = new ArrayList<>();
        campos.add("CD_MODELO");
        campos.add("NM_MODELO");
        campos.add("NM_MARCA");
                
        JTableUtils.preencherJTable(jtListaModelo, modeloDao.resultSetGetAllModelo(), campos); 
    }
    
    /**SET MODELO.
     * Ao ser 'chamada', ela carrega NA JFORM as informações de um modelo
     * 
     */
    public void setModelo(Modelo modelo){
        try {
            jtfCodigo.setText(modelo.getCodigoModelo().toString());
            jtfNome.setText(modelo.getNomeModelo());
            jtfCodigoMarca.setText(modelo.getMarca().getCodigoMarca().toString());
            jtfNomeMarca.setText(modelo.getMarca().getNomeMarca());
            jcbMarca.setSelectedItem(modelo.getMarca());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    
    /**GET MODELO.
     * Método para carregar uma MARCA
     * com informações da JForm completada
     * @return 
     */
    public Modelo getModelo(){
        try {
          modelo = new Modelo();
          marca = new Marca();
          
          marca = (Marca)jcbMarca.getSelectedItem();
          
          if(!jtfCodigo.getText().isEmpty()){
                modelo.setCodigoModelo(Long.valueOf(jtfCodigo.getText()));
            }
            if(!validarModelo()){
                return null;
            } else {
                modelo.setNomeModelo(jtfNome.getText());
                modelo.setMarca(marca);
                return modelo;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } 
    }
    
    /**VALIDAR CAMPOS.
     * Método que faz a validação dos campos
     * se todos estiverem preenchidos, OK
     */
    public Boolean validarModelo(){
        if(jtfNome.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Informe um Modelo");
            jtfNome.grabFocus();
            return false;
        }
        
        if(jtfCodigoMarca.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Informe uma Marca");
            jcbMarca.grabFocus();
            return false;
        }
        return true;
    }
    
    
    /**Habilita/Desabilita campos.
     * Método que ao iniciar, habilita ou desabilita os campos 'nome e uf'
     */
    public void habilitarCampos(boolean estado){
        jtfNome.setEnabled(estado);
        jcbMarca.setEnabled(estado);
    }
    
    /**LimparCampos
     * Método para limpar caixas de JTextField no JForm
     */
    public void limparCampo(){
        jtfCodigo.setText("");
        jtfNome.setText("");
        jtfCodigoMarca.setText("");
        jtfNomeMarca.setText(""); 
        jcbMarca.setSelectedIndex(-1);
    } 
    
    /**Método para habilitar/desabilitar os BOTÓES, ao iniciar a tela.
     * Ao iniciar, manter os botões principais em estado de habilitado
     */
    public void estadoPadraoDosBotoes(){
        jbNovo.setEnabled(true);
        jbAlterar.setEnabled(true);
        jbExcluir.setEnabled(true);
        
        jbGravar.setEnabled(false);
        jbCancelar.setEnabled(false);
    }
    
    /**Métod para habilitar/desabilitar os BOTÕES, quando se está em modo de edição.
     * 
     */
    public void estadoBotoesModoEdicao(){
        jbNovo.setEnabled(false);
        jbAlterar.setEnabled(true);
        jbExcluir.setEnabled(true);
        
        jbGravar.setEnabled(true);
        jbCancelar.setEnabled(true);
    }
    /**Métod para habilitar/desabilitar os BOTÕES, quando se está adicionando novo.
     * 
     */
    public void estadoDosBotoesAoInserirNovo(){
        jbNovo.setEnabled(false);
        jbAlterar.setEnabled(false);
        jbExcluir.setEnabled(false);
        
        jbGravar.setEnabled(true);
        jbCancelar.setEnabled(true);
    }
    
    /**Método inicial dos botões
     * 
     */
    public void estadoInicialDosBotoes(){
        jbNovo.setEnabled(true);
        jbAlterar.setEnabled(false);
        jbExcluir.setEnabled(false);
        
        jbGravar.setEnabled(false);
        jbCancelar.setEnabled(false);
    }
}
